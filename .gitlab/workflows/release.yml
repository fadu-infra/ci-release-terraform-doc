changelog:
  stage: pre
  image:
    name: orhunp/git-cliff:latest
    entrypoint: ['']
  variables:
    GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
    GIT_DEPTH: 0 # avoid shallow clone to give cliff all the info it needss
  script:
    - git-cliff --latest -r . > release_notes.md
    - git-cliff -r . > CHANGELOG.md
  artifacts:
    paths:
      - CHANGELOG.md
      - release_notes.md

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: changelog
      artifacts: true
  script:
    - echo "Creating release"
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: release_notes.md
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_SHA'

upload-changelog:
  stage: post
  image: alpine:latest
  needs:
    - job: changelog
      artifacts: true
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      CONTENT=$(cat CHANGELOG.md | jq -sR '@base64')

      jq -n \
        --arg branch "$CI_DEFAULT_BRANCH" \
        --arg content "$CONTENT" \
        --arg message "doc: update CHANGELOG.md for version ${CI_COMMIT_TAG}" \
        '{
          branch: $branch,
          encoding: "base64",
          content: $content,
          commit_message: $message
        }' > payload.json

      curl --request PUT \
        --header "PRIVATE-TOKEN: $GITLAB_API_TOKEN" \
        --header "Content-Type: application/json" \
        --data @payload.json \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/files/CHANGELOG.md"

github-release:
  stage: post
  image: alpine:latest
  needs:
    - job: changelog
      artifacts: true
  variables:
    GITHUB_REPO: 'fadu-infra/ci-release-terraform-doc'
    GITHUB_API_URL: 'https://api.github.com'
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      RELEASE_NOTES=$(cat release_notes.md | jq -R -s '.')
      RELEASE_INFO=$(curl -s \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases/tags/${CI_COMMIT_TAG}")

      RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // empty')

      if [ -z "$RELEASE_ID" ]; then
        # Create new release
        jq -n \
          --arg tag "$CI_COMMIT_TAG" \
          --arg name "Release ${CI_COMMIT_TAG}" \
          --arg body "$RELEASE_NOTES" \
          '{
            tag_name: $tag,
            name: $name,
            body: $body,
            draft: false,
            prerelease: false
          }' > payload.json

        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          --data @payload.json \
          "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases"

      else
        # Update existing release
        jq -n \
          --arg name "Release ${CI_COMMIT_TAG}" \
          --arg body "$RELEASE_NOTES" \
          '{
            name: $name,
            body: $body
          }' > payload.json

        curl -L \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          --data @payload.json \
          "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases/${RELEASE_ID}"
      fi
