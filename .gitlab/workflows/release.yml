include:
  - component: $CI_SERVER_FQDN/tech/components/semantic-release/gitlab-ci-semrel@3.11.5

semantic-version:
  stage: release
  extends: .semrel-base
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
  script:
    - semantic-release ${TRACE:+--debug} --ci
  artifacts:
    paths:
      - generated_tag.txt

gitlab-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - echo "Creating release"
    - export GENERATED_TAG=$(cat generated_tag.txt)
    - echo "Creating release for tag $GENERATED_TAG"
  release:
    name: 'Release $GENERATED_TAG'
    description: release_notes.md
    tag_name: '$GENERATED_TAG'
    ref: '$CI_COMMIT_SHA'

github-release:
  stage: .post
  extends: .release-base
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
  variables:
    GITHUB_REPO: 'fadu-infra/ci-release-terraform-doc'
    GITHUB_API_URL: 'https://api.github.com'
  script:
    - |
      RELEASE_NOTES=$(cat release_notes.md | jq -R -s '.')
      RELEASE_INFO=$(curl -s \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases/tags/${CI_COMMIT_TAG}")

      RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id // empty')

      if [ -z "$RELEASE_ID" ]; then
        # Create new release
        jq -n \
          --arg tag "$CI_COMMIT_TAG" \
          --arg name "Release ${CI_COMMIT_TAG}" \
          --arg body "$RELEASE_NOTES" \
          '{
            tag_name: $tag,
            name: $name,
            body: $body,
            draft: false,
            prerelease: false
          }' > payload.json

        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          --data @payload.json \
          "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases"

      else
        # Update existing release
        jq -n \
          --arg name "Release ${CI_COMMIT_TAG}" \
          --arg body "$RELEASE_NOTES" \
          '{
            name: $name,
            body: $body
          }' > payload.json

        curl -L \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          --data @payload.json \
          "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases/${RELEASE_ID}"
      fi
