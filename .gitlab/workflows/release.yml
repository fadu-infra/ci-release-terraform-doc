include:
  - component: $CI_SERVER_FQDN/tech/components/semantic-release/gitlab-ci-semrel@3.11.5

semantic-release:
  stage: release
  extends: .semrel-base
  variables:
    GITLAB_TOKEN: $GITLAB_API_TOKEN
    # GIT_AUTHOR_NAME: 'GitLab CI Bot'
    GIT_AUTHOR_EMAIL: 'gitlab-bot@fadutec.com'
    # GIT_COMMITTER_NAME: 'GitLab CI Bot'
    GIT_COMMITTER_EMAIL: 'gitlab-bot@fadutec.com'
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
  script:
    - semantic-release ${TRACE:+--debug} --ci

# release:
#   stage: release
#   image: node:20
#   variables:
#     GITLAB_TOKEN: ${GITLAB_API_TOKEN}
#   before_script:
#     - npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/gitlab conventional-changelog-conventionalcommits
#   script:
#     - semantic-release ${TRACE:+--debug} --ci
#   rules:
#     - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

github-release:
  stage: post
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success
  variables:
    GITHUB_REPO: 'fadu-infra/ci-release-terraform-doc'
    GITHUB_API_URL: 'https://api.github.com'
  script:
    - |
      LATEST_TAG="$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${GITLAB_API_URL}/projects/${CI_PROJECT_ID}/repository/tags" | jq -r '.[0].name')"
      GITLAB_RELEASE="$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${GITLAB_API_URL}/projects/${CI_PROJECT_ID}/releases/${LATEST_TAG}")"
      RELEASE_NOTES="$(echo "$GITLAB_RELEASE" | jq -r ".description")"
      RELEASE_INFO="$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GITHUB_API_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases/tags/${LATEST_TAG}")"
      RELEASE_ID="$(echo "$RELEASE_INFO" | jq -r ".id // empty")"

      if [ -z "$RELEASE_ID" ]; then
        # Create new release
        jq -n \
          --arg tag "$CI_COMMIT_TAG" \
          --arg name "Release ${CI_COMMIT_TAG}" \
          --arg body "$RELEASE_NOTES" \
          '{
            tag_name: $tag,
            name: $name,
            body: $body,
            draft: false,
            prerelease: false
          }' > payload.json

        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          --data @payload.json \
          "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases"

      else
        # Update existing release
        jq -n \
          --arg name "Release ${CI_COMMIT_TAG}" \
          --arg body "$RELEASE_NOTES" \
          '{
            name: $name,
            body: $body
          }' > payload.json

        curl -L \
          -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          --data @payload.json \
          "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases/${RELEASE_ID}"
      fi
